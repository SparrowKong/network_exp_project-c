#include "../core/udp_chat.h"
#include <signal.h>

static client_state_t g_client;
static chat_statistics_t g_stats = {0};
static volatile bool g_running = true;

/**
 * 信号处理函数，用于优雅关闭客户端
 * @param sig 信号编号
 */
void signal_handler(int sig) {
    printf("\n收到信号 %d，正在断开连接...\n", sig);
    g_running = false;
}

/**
 * 显示客户端菜单
 */
void show_client_menu() {
    printf("\n========== UDP聊天客户端菜单 ==========\n");
    printf("1. 连接服务器\n");
    printf("2. 发送消息\n");
    printf("3. 查看消息历史\n");
    printf("4. 显示统计信息\n");
    printf("5. 客户端配置\n");
    printf("6. 帮助信息\n");
    printf("0. 断开连接并退出\n");
    printf("====================================\n");
    printf("请选择操作: ");
}

/**
 * 显示连接状态
 */
void show_connection_status() {
    printf("\n========== 连接状态 ==========\n");
    if (g_client.is_connected) {
        printf("状态: 已连接\n");
        printf("用户名: %s\n", g_client.username);
        printf("服务器: %s:%d\n", 
               inet_ntoa(g_client.server_addr.sin_addr),
               ntohs(g_client.server_addr.sin_port));
        printf("连接时间: %s\n", format_timestamp(g_client.connect_time));
        printf("连接时长: %ld 秒\n", time(NULL) - g_client.connect_time);
    } else {
        printf("状态: 未连接\n");
    }
    printf("===========================\n");
}

/**
 * 显示客户端配置
 */
void show_client_config() {
    printf("\n========== 客户端配置信息 ==========\n");
    printf("默认服务器端口: %d\n", DEFAULT_PORT);
    printf("最大消息长度: %d\n", MAX_MESSAGE_SIZE);
    printf("最大用户名长度: %d\n", MAX_USERNAME_SIZE);
    printf("缓冲区大小: %d\n", BUFFER_SIZE);
    
    if (g_client.socket_fd > 0) {
        printf("Socket文件描述符: %d\n", g_client.socket_fd);
        show_connection_status();
    }
    printf("=================================\n");
}

/**
 * 显示帮助信息
 */
void show_help() {
    printf("\n========== UDP聊天客户端帮助 ==========\n");
    printf("功能说明:\n");
    printf("1. 连接服务器 - 连接到UDP聊天服务器\n");
    printf("2. 发送消息 - 在聊天室中发送消息\n");
    printf("3. 查看消息历史 - 查看接收到的消息（简化版）\n");
    printf("4. 显示统计信息 - 查看客户端统计数据\n");
    printf("5. 客户端配置 - 查看客户端配置信息\n");
    printf("6. 帮助信息 - 显示此帮助菜单\n");
    printf("0. 断开连接并退出 - 安全退出客户端\n");
    printf("\n使用说明:\n");
    printf("- 首先需要连接到服务器才能发送消息\n");
    printf("- 连接后会自动接收其他用户的消息\n");
    printf("- 可以发送最长 %d 个字符的消息\n", MAX_MESSAGE_SIZE - 1);
    printf("- 用户名长度不能超过 %d 个字符\n", MAX_USERNAME_SIZE - 1);
    printf("- 使用 Ctrl+C 可以安全退出客户端\n");
    printf("====================================\n");
}

/**
 * 连接到服务器
 * @param server_ip 服务器IP地址
 * @param port 服务器端口
 * @param username 用户名
 * @return 成功返回0，失败返回-1
 */
int connect_to_server(const char* server_ip, int port, const char* username) {
    if (g_client.is_connected) {
        printf("客户端已经连接到服务器！\n");
        return -1;
    }
    
    printf("正在初始化UDP聊天客户端...\n");
    
    // 初始化客户端
    if (client_init(&g_client, server_ip, port) != 0) {
        printf("客户端初始化失败！\n");
        return -1;
    }
    
    printf("正在连接服务器 %s:%d...\n", server_ip, port);
    
    // 连接服务器
    if (client_connect(&g_client, username) != 0) {
        printf("连接服务器失败！\n");
        client_cleanup(&g_client);
        return -1;
    }
    
    printf("成功连接到服务器！\n");
    printf("用户名: %s\n", username);
    printf("现在可以开始聊天了...\n");
    
    // 重置统计信息
    memset(&g_stats, 0, sizeof(g_stats));
    g_stats.session_start = time(NULL);
    
    return 0;
}

/**
 * 断开与服务器的连接
 */
void disconnect_from_server() {
    if (!g_client.is_connected) {
        printf("客户端没有连接到服务器！\n");
        return;
    }
    
    printf("正在断开连接...\n");
    client_cleanup(&g_client);
    printf("已断开与服务器的连接\n");
}

/**
 * 发送消息到服务器
 * @param message 要发送的消息
 * @return 成功返回0，失败返回-1
 */
int send_chat_message(const char* message) {
    if (!g_client.is_connected) {
        printf("请先连接到服务器！\n");
        return -1;
    }
    
    if (!message || strlen(message) == 0) {
        printf("消息不能为空！\n");
        return -1;
    }
    
    if (strlen(message) >= MAX_MESSAGE_SIZE) {
        printf("消息太长，最大长度为 %d 个字符！\n", MAX_MESSAGE_SIZE - 1);
        return -1;
    }
    
    if (client_send_message(&g_client, message) == 0) {
        g_stats.messages_sent++;
        g_stats.bytes_sent += strlen(message);
        printf("消息发送成功\n");
        return 0;
    } else {
        printf("消息发送失败！\n");
        return -1;
    }
}

/**
 * 消息接收循环
 */
void message_receive_loop() {
    fd_set read_fds;
    struct timeval timeout;
    char input[MAX_MESSAGE_SIZE];
    
    printf("进入聊天模式... (输入 '/quit' 退出聊天)\n");
    printf("--------------------------------------------------\n");
    
    // 设置socket为非阻塞模式
    set_socket_nonblocking(g_client.socket_fd);
    
    while (g_running && g_client.is_connected) {
        FD_ZERO(&read_fds);
        FD_SET(g_client.socket_fd, &read_fds);
        FD_SET(STDIN_FILENO, &read_fds);
        
        timeout.tv_sec = 1;
        timeout.tv_usec = 0;
        
        int max_fd = (g_client.socket_fd > STDIN_FILENO) ? g_client.socket_fd : STDIN_FILENO;
        int result = select(max_fd + 1, &read_fds, NULL, NULL, &timeout);
        
        if (result == -1) {
            if (errno != EINTR) {
                printf("Select错误: %s\n", strerror(errno));
                break;
            }
            continue;
        }
        
        if (result == 0) {
            // 超时，继续循环
            continue;
        }
        
        // 检查是否有服务器消息
        if (FD_ISSET(g_client.socket_fd, &read_fds)) {
            if (client_receive_messages(&g_client) == 0) {
                g_stats.messages_received++;
            }
        }
        
        // 检查是否有键盘输入
        if (FD_ISSET(STDIN_FILENO, &read_fds)) {
            if (fgets(input, sizeof(input), stdin)) {
                // 移除换行符
                input[strcspn(input, "\n")] = '\0';
                
                if (strlen(input) == 0) {
                    continue;
                }
                
                // 检查退出命令
                if (strcmp(input, "/quit") == 0) {
                    printf("退出聊天模式\n");
                    break;
                }
                
                // 检查帮助命令
                if (strcmp(input, "/help") == 0) {
                    printf("聊天命令:\n");
                    printf("/quit - 退出聊天\n");
                    printf("/stats - 显示统计信息\n");
                    printf("/users - 请求用户列表\n");
                    continue;
                }
                
                // 检查统计信息命令
                if (strcmp(input, "/stats") == 0) {
                    print_client_stats(&g_client, &g_stats);
                    continue;
                }
                
                // 检查用户列表命令
                if (strcmp(input, "/users") == 0) {
                    // 发送用户列表请求
                    chat_message_t list_msg = {0};
                    list_msg.type = MSG_USER_LIST;
                    strncpy(list_msg.username, g_client.username, sizeof(list_msg.username) - 1);
                    list_msg.username[sizeof(list_msg.username) - 1] = '\0';
                    strcpy(list_msg.content, "请求用户列表");
                    list_msg.timestamp = time(NULL);
                    list_msg.checksum = calculate_checksum(&list_msg);
                    
                    char buffer[BUFFER_SIZE];
                    int msg_len = message_serialize(&list_msg, buffer, sizeof(buffer));
                    if (msg_len > 0) {
                        safe_sendto(g_client.socket_fd, buffer, msg_len, &g_client.server_addr);
                    }
                    continue;
                }
                
                // 发送普通聊天消息
                send_chat_message(input);
            }
        }
    }
    
    printf("--------------------------------------------------\n");
}

/**
 * 交互式客户端管理界面
 */
void interactive_client_management() {
    int choice;
    char server_ip[256] = "127.0.0.1";
    int port = DEFAULT_PORT;
    char username[MAX_USERNAME_SIZE];
    char message[MAX_MESSAGE_SIZE];
    char input[256];
    
    printf("欢迎使用UDP聊天客户端！\n");
    
    while (g_running) {
        show_client_menu();
        
        if (fgets(input, sizeof(input), stdin) == NULL) {
            break;
        }
        
        choice = atoi(input);
        
        switch (choice) {
            case 1:
                // 连接服务器
                printf("请输入服务器IP地址 (默认 127.0.0.1): ");
                if (fgets(input, sizeof(input), stdin)) {
                    input[strcspn(input, "\n")] = '\0';
                    if (strlen(input) > 0) {
                        strcpy(server_ip, input);
                    }
                }
                
                printf("请输入服务器端口 (默认 %d): ", DEFAULT_PORT);
                if (fgets(input, sizeof(input), stdin)) {
                    int input_port = atoi(input);
                    if (input_port > 0 && input_port <= 65535) {
                        port = input_port;
                    }
                }
                
                printf("请输入用户名: ");
                if (fgets(username, sizeof(username), stdin)) {
                    username[strcspn(username, "\n")] = '\0';
                    
                    if (strlen(username) > 0 && is_valid_username(username)) {
                        if (connect_to_server(server_ip, port, username) == 0) {
                            // 连接成功后进入聊天模式
                            message_receive_loop();
                        }
                    } else {
                        printf("无效的用户名！\n");
                    }
                }
                break;
                
            case 2:
                // 发送消息
                if (!g_client.is_connected) {
                    printf("请先连接到服务器！\n");
                    break;
                }
                
                printf("请输入要发送的消息: ");
                if (fgets(message, sizeof(message), stdin)) {
                    message[strcspn(message, "\n")] = '\0';
                    send_chat_message(message);
                }
                break;
                
            case 3:
                // 查看消息历史（简化实现）
                printf("消息历史功能（简化版）:\n");
                printf("所有接收到的消息都会实时显示在屏幕上\n");
                printf("如需查看完整消息历史，建议使用聊天模式\n");
                break;
                
            case 4:
                // 显示统计信息
                print_client_stats(&g_client, &g_stats);
                break;
                
            case 5:
                // 客户端配置
                show_client_config();
                break;
                
            case 6:
                // 帮助信息
                show_help();
                break;
                
            case 0:
                // 退出程序
                if (g_client.is_connected) {
                    disconnect_from_server();
                }
                g_running = false;
                printf("感谢使用UDP聊天客户端，再见！\n");
                break;
                
            default:
                printf("无效的选择，请重新输入！\n");
                break;
        }
        
        if (choice != 0 && choice != 1) {
            printf("\n按Enter键继续...");
            getchar();
        }
    }
}

/**
 * 主函数
 */
int main(int argc, char* argv[]) {
    printf("UDP聊天客户端 - 计算机网络实验项目\n");
    printf("=====================================\n");
    
    // 设置信号处理
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);
    
    // 初始化客户端状态
    memset(&g_client, 0, sizeof(client_state_t));
    
    // 检查命令行参数
    if (argc > 1) {
        if (strcmp(argv[1], "--help") == 0 || strcmp(argv[1], "-h") == 0) {
            printf("使用方法: %s [服务器IP] [端口] [用户名]\n", argv[0]);
            printf("服务器IP: 服务器IP地址 (默认: 127.0.0.1)\n");
            printf("端口: 服务器端口 (默认: %d)\n", DEFAULT_PORT);
            printf("用户名: 聊天用户名\n");
            printf("示例: %s 192.168.1.100 9999 张三\n", argv[0]);
            return 0;
        }
        
        // 直接连接模式
        char* server_ip = "127.0.0.1";
        int port = DEFAULT_PORT;
        char* username = NULL;
        
        if (argc >= 2) server_ip = argv[1];
        if (argc >= 3) {
            port = atoi(argv[2]);
            if (port <= 0 || port > 65535) {
                printf("错误: 无效的端口号 %d\n", port);
                return 1;
            }
        }
        if (argc >= 4) username = argv[3];
        
        if (!username || !is_valid_username(username)) {
            printf("错误: 需要提供有效的用户名\n");
            return 1;
        }
        
        if (connect_to_server(server_ip, port, username) != 0) {
            return 1;
        }
        
        printf("连接成功，进入聊天模式... (按Ctrl+C退出)\n");
        message_receive_loop();
        disconnect_from_server();
    } else {
        // 交互式模式
        interactive_client_management();
    }
    
    return 0;
}